#include <iostream>
#include <vector>
#include <algorithm>

/*Given an array of points where points[i] = [xi, yi] represents a point
on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance 
(i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be 
unique (except for the order that it is in).*/

static bool compare(const std::vector<int>& a, const std::vector<int>& b) {
	double distA = sqrt((0 - a[0]) * (0 - a[0]) + (0 - a[1]) * (0 - a[1]));
	double distB = sqrt((0 - b[0]) * (0 - b[0]) + (0 - b[1]) * (0 - b[1]));
	return distB > distA;
}
std::vector<std::vector<int>> kClosest(std::vector<std::vector<int>>& points, int k) {
	std::sort(points.begin(), points.end(), compare);
	return std::vector<std::vector<int>>(points.begin(), points.begin() + k);
}

int main()
{
	std::vector<std::vector<int>> nums1{ {1,3},{-2,2} };
	std::vector<std::vector<int>> res = kClosest(nums1, 1);
	for (size_t i = 0; i < res.size(); i++)
	{
		std::cout << res[i][0] << " " << res[i][1] << std::endl;
	}

}
